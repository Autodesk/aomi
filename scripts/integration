#!/usr/bin/env bash
# This script will execute our BATS based tests. It sets up the test
# environment with AWS credentials and other run time dependencies.
# Executed with no options it will attempt to run every test that is
# supported by the platform and dependencies. You may also pass in
# a single option in order to run only one test suite.
set -e

# These path variables are used in this script and within
# the BATS execution context.
SCRIPTDIR=$( cd ${0%/*} && pwd)
ROOTDIR=${SCRIPTDIR%/*}
export CIDIR="$ROOTDIR"
export ROOTDIR
export COVERAGE_FILE="${CIDIR}/.coverage"
BATSGIT="${ROOTDIR}/.bats-git"
BATSBIN="${ROOTDIR}/.bats"
VAULTDIR="${ROOTDIR}/.vault"
VAULTBIN="${VAULTDIR}/vault"

# Define our test groups. Currently not every test is executed
# in every single execution context.
GPG_TESTS="cold_storage"
TESTS="a_smoke environment exec_context seed template cubbyhole output ux diff auth errors"
VAULT_TESTS="aws"

# These are the HCV paths where we can find the secrets used
# during integration tests interacting with third parties.
export VAULT_AWS_PATH="aomi/aws/creds/travis"
export VAULT_SECRET_PATH="secrets/aomi"

# Default to a unreasonably old version of HCV because reasons.
if [ -z "$VAULT_VERSION" ] ; then
    VAULT_VERSION="0.7.3"
fi

# This way the smoke tests always get executed first when running
# every single suite.
if [ $# == 1 ] ; then
    TEST="$1"
    if [ "$TEST" == "smoke" ] ; then
        TEST="a_smoke"
    fi
fi

# We always need shyaml
if ! which shyaml &> /dev/null ; then
    echo "shyaml required"
    exit 1
fi

GPG=gpg2
if ! which "$GPG" ; then
    GPG=gpg
    if ! which "$GPG" ; then
        echo "either gpg or gpg2 must be installed"
    fi
fi

# We only need gpg2 on non-travis hosts as it doesn't
# work on their docker infrastructure
if [ -z "$TRAVIS" ] && ! which "$GPG" &> /dev/null ; then
    echo "gpg2 required"
    exit 1
fi

# If we are not in a travis environment then always ensure
# we are running our tests in a virtualenv to try and
# minimize the amount of drama from heterogenous developer
# workstations.
if [ -z "$TRAVIS" ] && [ -z "$VIRTUAL_ENV" ] ; then
    . "${ROOTDIR}/.ci-env/bin/activate"
fi
OWD="$PWD"
cd "$ROOTDIR"
python setup.py install
cd "$OWD"

# Ensure the BATS shell script test framework is installed.
if [ ! -d "$BATSGIT" ] ; then
    git clone --depth 1 https://github.com/sstephenson/bats.git "$BATSGIT"
fi
if [ ! -d "$BATSBIN" ] ; then
    cd "$BATSGIT"
    ./install.sh "$BATSBIN"
fi

# when switching between local osx/docker you can end up
# with incorrect vault binaries
if [ -d "$VAULTDIR" ] ; then
    if [ "$(uname -s)" == "Darwin" ] && \
           ! file "$VAULTBIN" | grep "Mach-O" &> /dev/null ; then
        rm -rf "$VAULTDIR"
    elif [ "$(uname -s)" == "Linux" ] && \
             ! file "$VAULTBIN" | grep "LSB" &> /dev/null ; then
        rm -rf "$VAULTDIR"
    fi
fi

# Fetch our requisite version of HCVault. Yeah that's
# right, only testable on mac/linux right now.
if [ ! -d "$VAULTDIR" ] ; then
    mkdir -p "$VAULTDIR"
    OS=$(uname -s)
    if [ "$OS" == "Darwin" ] ; then
        URL="https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_darwin_amd64.zip"
    elif [ "$OS" == "Linux" ] ; then
        URL="https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_linux_amd64.zip"
    fi
    wget -O  "/tmp/vault.zip"  "$URL"
    unzip -d "$VAULTDIR" "/tmp/vault.zip"
    rm -f "/tmp/vault.zip"
    chmod +x "$VAULTBIN"
fi
PATH="${VAULTDIR}:${PATH}"
VAULTPATH=$(which vault)
if [ -z "$VAULTPATH" ] ; then
    echo "Unable to find vault executable"
    exit 1
fi
echo "Testing with ${VAULTPATH} v${VAULT_VERSION}"
export PATH

# Figure out our Vault token. We have four options.
# * no token, and we skip AWS tests
# * token via local file
# * token via environment variable
# * token via gudrun_travis
CI_TOKEN="${ROOTDIR}/.aomi-test/vault-token"
if [ ! -z "$TRAVIS" ] && [ ! -z "$CI" ] ; then
    echo "Looking under couch for Vault token"
    "${SCRIPTDIR}/get-vault-token" || true
    if [ -e "$CI_TOKEN" ] ; then
        VAULT_TOKEN=$(cat "$CI_TOKEN")
        echo "Using derived vault token"
    else
        echo "No vault token"
    fi
else
    if [ ! -z "$VAULT_TOKEN" ] ; then
        echo "Using env vault token"
    elif [ -e "${HOME}/.vault-token" ] ; then
         VAULT_TOKEN=$(cat "${HOME}/.vault-token")
         echo "Using user vault token"
    else
        echo "No vault token"
    fi
fi

# from http://mywiki.wooledge.org/BashFAQ/026
shuffle_tests() {
   local i tmp size max rand

   size=${#EXEC_TESTS[*]}
   for ((i=size-1; i>0; i--)); do
      # $RANDOM % (i+1) is biased because of the limited range of $RANDOM
      # Compensate by using a range which is a multiple of the rand modulus.

      max=$(( 32768 / (i+1) * (i+1) ))
      while (( (rand=$RANDOM) >= max )); do :; done
      rand=$(( rand % (i+1) ))
      tmp=${EXEC_TESTS[i]} EXEC_TESTS[i]=${EXEC_TESTS[rand]} EXEC_TESTS[rand]=$tmp
   done
}

# Figure out which tests to run
EXEC_TESTS=()
for a_test in $TESTS ; do
    EXEC_TESTS=(${EXEC_TESTS[@]} "${ROOTDIR}/tests/integration/${a_test}.bats")
done
if [ -z "$TRAVIS" ] ; then
    EXEC_TESTS=(${EXEC_TESTS[@]} "${ROOTDIR}/tests/integration/${GPG_TESTS}.bats")
fi

# If we have Vault credentials we need to check to see if they are legit
if [ ! -z "$VAULT_TOKEN" ] && \
       [ ! -z "$VAULT_ADDR" ] ; then
    echo "Vault detected..."
    if VAULT_TOKEN=$VAULT_TOKEN "$VAULTBIN" read -field=refresh_interval "$VAULT_SECRET_PATH" &> /dev/null ; then
        echo "Vault server seems legit..."
        if [ ! -d "${ROOTDIR}/.aomi-test" ] ; then
            mkdir -p "${ROOTDIR}/.aomi-test"
        fi
        echo "$VAULT_TOKEN" > "$CI_TOKEN"
        for a_test in $VAULT_TESTS ; do
            EXEC_TESTS=(${EXEC_TESTS[@]} "${ROOTDIR}/tests/integration/${a_test}.bats")
        done
        echo "$VAULT_ADDR" > "${ROOTDIR}/.aomi-test/vault-addr"
    else
        echo "Unable to confirm vault"
        rm -rf "${ROOTDIR}/.aomi-test"
    fi
else
    echo "No vault detected"
    rm -rf "${ROOTDIR}/.aomi-test"
fi

# sprinkle some entropy
shuffle_tests

# If we are only testing the aws suite then we pretty much
# need to have a Vault token
if [ ! -e "${ROOTDIR}/.aomi-test/vault-token" ] ; then
    if [ ! -z "$TEST" ] && [ "$TEST" == "aws" ] ; then
        echo "Unable to execute AWS tests!"
        exit 1
    else
        echo "WARNING: Skipping AWS tests!"
    fi
else
    echo "Actually found a token!"
fi

# Build up our BATS suite
cmd="${ROOTDIR}/.bats/bin/bats"
if [ -z "$TEST" ] ; then
    cmd="${cmd} ${EXEC_TESTS[@]}"
else
    cmd="${cmd} ${ROOTDIR}/tests/integration/${TEST}.bats"
fi
RC=0
if ! $cmd ; then
    RC=1
fi

# Only when we are in Travis do we revoke our token when complete.
if [ ! -z "$TRAVIS" ] && \
       [ ! -z "$CI" ] && \
       [ -e "${ROOTDIR}/.aomi-test/vault-token" ] ; then
    echo "Tearing up our Vault token"
    VAULT_TOKEN=$VAULT_TOKEN "$VAULTBIN" write -f auth/token/revoke-self &> /dev/null
fi
exit "$RC"
