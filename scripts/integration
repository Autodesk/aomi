#!/usr/bin/env bash

SCRIPTDIR=$( cd ${0%/*} && pwd)
TESTS="a_smoke environment exec_context seed template"
VAULT_TESTS="aws"
GPG_TESTS="cold_storage"
export VAULT_AWS_PATH="travis/aws/creds/aomi"
export VAULT_SECRET_PATH="secrets/aomi"

VAULT_VERSION="0.6.1"

set -e

if [ $# == 1 ] ; then
    TEST="$1"
    if [ "$TEST" == "smoke" ] ; then
        TEST="a_smoke"
    fi
fi

CIDIR=${SCRIPTDIR%/*}
BATSGIT="${CIDIR}/.bats-git"
BATSBIN="${CIDIR}/.bats"

if ! which shyaml &> /dev/null ; then
    echo "shyaml required"
    exit 1
fi

if [ -z "$TRAVIS" ] && ! which gpg2 &> /dev/null ; then
    echo "gpg2 required"
    exit 1
fi

if [ -z "$TRAVIS" ] ; then
    . "${CIDIR}/.ci-env/bin/activate"
fi
OWD="$PWD"
cd "$CIDIR"
python setup.py install
cd "$OWD"
if [ ! -d "$BATSGIT" ] ; then
    git clone --depth 1 https://github.com/sstephenson/bats.git "$BATSGIT"
fi
if [ ! -d "$BATSBIN" ] ; then
    cd "$BATSGIT"
    ./install.sh "$BATSBIN"
fi

# when switching between local osx/docker you can end up
# with incorrect vault binaries
if [ -d "${CIDIR}/.vault" ] ; then
    if [ "$(uname -s)" == "Darwin" ] && \
           ! file "${CIDIR}/.vault/vault" | grep "Mach-O" &> /dev/null ; then
        rm -rf "${CIDIR}/.vault"
    elif [ "$(uname -s)" == "Linux" ] && \
             ! file "${CIDIR}/.vault/vault" | grep LSB &> /dev/null ; then
        rm -rf "${CIDIR}/.vault"
    fi
fi

if [ ! -d "${CIDIR}/.vault" ] ; then
    mkdir -p "${CIDIR}/.vault/"
    OS=$(uname -s)
    if [ "$OS" == "Darwin" ] ; then
        URL="https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_darwin_amd64.zip"
    elif [ "$OS" == "Linux" ] ; then
        URL="https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_linux_amd64.zip"
    fi

    wget -O  "/tmp/vault.zip"  "$URL"
    unzip -d "${CIDIR}/.vault" "/tmp/vault.zip"
    chmod +x "${CIDIR}/.vault/vault"
fi
PATH="${PATH}:${CIDIR}/.vault"
export PATH

if [ ! -z "$TRAVIS" ] && [ ! -z "$CI" ] ; then
    echo "Looking under couch for Vault token"
    "${SCRIPTDIR}/get-vault-token" || true
fi

export CIDIR

EXEC_TESTS=""
for a_test in $TESTS ; do
    EXEC_TESTS="${EXEC_TESTS} ${CIDIR}/tests/integration/${a_test}.bats"
done
if [ -z "$TRAVIS" ] ; then
    EXEC_TESTS="${EXEC_TESTS} ${CIDIR}/tests/integration/${GPG_TESTS}.bats"
fi

CI_TOKEN="${CIDIR}/.aomi-test/vault-token"
if [ -e "$CI_TOKEN" ] ; then
    VAULT_TOKEN=$(cat "$CI_TOKEN")
elif [ -e "${HOME}/.vault-token" ] ; then
    VAULT_TOKEN=$(cat "${HOME}/.vault-token")
fi

if [ ! -z "$VAULT_TOKEN" ] && \
       [ ! -z "$VAULT_ADDR" ] ; then
    echo "Vault detected..."
    if VAULT_TOKEN=$VAULT_TOKEN "${CIDIR}/.vault/vault" read -field=refresh_interval "$VAULT_SECRET_PATH" &> /dev/null ; then
        echo "Vault server seems legit..."
        if [ ! -d "${CIDIR}/.aomi-test" ] ; then
            mkdir -p "${CIDIR}/.aomi-test"
        fi
        echo "$VAULT_TOKEN" > "$CI_TOKEN"
        for a_test in $VAULT_TESTS ; do
            EXEC_TESTS="${EXEC_TESTS} ${CIDIR}/tests/integration/${a_test}.bats"
        done
        echo "$VAULT_ADDR" > "${CIDIR}/.aomi-test/vault-addr"
    else
        rm -rf "${CIDIR}/.aomi-test"
    fi
else
    rm -rf "${CIDIR}/.aomi-test"
fi

if [ ! -e "${CIDIR}/.aomi-test/vault-token" ] ; then
    echo "WARNING: Skipping AWS tests!"
fi

cmd="${CIDIR}/.bats/bin/bats"
if [ -z "$TEST" ] ; then
    cmd="${cmd} ${EXEC_TESTS}"
else
    cmd="${cmd} ${CIDIR}/tests/integration/${TEST}.bats"
fi
RC=0
if ! $cmd ; then
    RC=1
fi

if [ ! -z "$TRAVIS" ] && \
       [ ! -z "$CI" ] && \
       [ -e "${CIDIR}/.aomi-test/vault-token" ] ; then
    echo "Tearing up our Vault token"
    VAULT_TOKEN=$VAULT_TOKEN "${CIDIR}/.vault/vault" write -f auth/token/revoke-self &> /dev/null
fi
exit "$RC"
